#app-3주차
 // ScrollView에서의 flex 숫자는 의미가 없습니다. 정확히 보여지는 화면을 몇등분 하지 않고
        // 화면에 넣은 컨텐츠를 모두 보여주려 스크롤 기능이 존재하기 때문입니다. 
        // 여기선 내부의 컨텐츠들 영역을 결정짓기 위해서 height 값과 margin,padding 값을 적절히 잘 이용해야 합니다. 

**함수의 축약형
한줄일 경우 중괄호 생략 가능
()=>{} : 기본
()=>popup() : 축약형

**
리액트 네이티브는 리액트 라이브러리 기반으로 만들어진 프레임워크
기본적인 구조는 리액트를 닮아있다.

1. 컴포넌트 component : 정해진 엘리먼트들을 사용하여 만든 화면의 일부분
2. 상태 state : 컴포넌트에서 데이터를 유지하고 관리하기 위한 유일한 방법 == 그냥 사용할 데이터!
3. 속성 props : 상위 컴포넌트에서 하위 컴포넌트로 데이터를 전달하는 방식 == 그냥 데이터 전달!
4. useEffect : 화면에 컴포넌트가 그려지면 처음 실행해야 하는 함수들을 모아두는 곳

**Props
컴포넌트에 데이터를 전달한다. 전달 모습은 키와 벨류의 형태
전달받은 곳(component)에서는 전달한 곳의 키 값을 변수로 받는다(비구조할당방식
e.g)
<Card component={component}/>  // 
component={component} -> 키와 벨류의 형

function Card({component}){ //전달한 곳의 키값
}
** UI = component(state) //리액트의 화면과 상태에 대해 간단한 설명
ui는 component의 state가 바뀔때마다 화면이 바뀐다
화면의 데이터가 바뀌면 화면을 알아서 바꿔준다.
-->useState의 역할

**useEffect(()=>{ 
...화면이 그려진 다음 가장 먼저 실행되야 할 코드 작성 공간
, [] }

useEffect는 데이터를 준비할 때 사용한다.
데이터를 준비한다는 것은 데이터를 서버로부터 혹은 어디선가로부터 받은 후 상태에 반영한다는 것을 뜻한다.

**컴포넌트를 페이지화 시킨다 --> 스택 네이게이션

--------
<Stack.Navigator
            screenOptions={{    //모든 페이지가 공통적으로 가지는 속성
----
#화면 이동 : router와 navigation
#stackScreen을 사용하면 위 두가지 속성을 사용할 수 있다.
//페이지화 되면 router와 navigation 기능을 사용할 수 있다.
방법 : 해당 페이지에 인자로 {navigation, router} 와같이 비구조할당 방식으로 넘겨줌

//페이지의 제목 설정
navigation.setOptions({
title:'나만의 꿀팁'
})

//페이지 이동 함수 : .navigate

//페이지 이동시 해당 데이터(딕셔너리형태)도 함께 가져가 --> 함수의 두,세,...번째 인자
navigation.navigate("DetailPage", {
title:title  //두번째 인자. (같이 가져가)
})

// 전달받은 데이터를 받는 route 딕셔너리!
// 비구조할당방식 주로 사용
//route에 params 객체 키로 연결되어 전달되는 데이터를 꺼내사용

const {title} = route.params; (전달한 키값)

-------
e.g) navigation.navigate("DetailPage", {content})

DetailPage에서
route.params 는 content !
route.params.title--> content.tile을 가져온다.

##DetailPage 에러방지 >1. 로딩화면으로 구현해보기!
 // 에러방지 > 2. 초기데이터 간단히 입력(사용자는 볼 수 없을 정도로 짧다)
        // 에러방지 > 1. 로딩화면

